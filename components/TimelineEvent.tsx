import React, { FC } from "react";
import { Pressable } from "react-native";
import styled, { useTheme } from "styled-components/native";

import { Divider, P1Bold, P1Regular, P2Regular } from "./typography";
// import Pill from "@/assets/images/pill.svg";
import { TimelineItem } from "@/constants/entities";
import { getFormattedDateWithTodayTomorrow } from "./locale-fns";
import { Image } from "expo-image";
import Svg, { Path } from "react-native-svg";

const Pill = () => (
  <Svg width="24" height="24" viewBox="0 0 24 24" fill="none">
    <Path
      fill-rule="evenodd"
      clip-rule="evenodd"
      d="M16.9253 9.42986C16.2738 8.95928 15.8394 8.27149 15.7308 7.47511H16.0928C16.31 7.47511 16.4548 7.29412 16.4548 7.11312V4.36199C16.4548 4.1448 16.2738 4 16.0928 4H8.09276C7.87557 4 7.73077 4.181 7.73077 4.36199V7.11312C7.73077 7.33032 7.91176 7.47511 8.09276 7.47511H8.45475C8.34615 8.27149 7.91176 8.99548 7.26018 9.42986C6.78959 9.75566 6.5 10.2986 6.5 10.8416V18.2624C6.5 19.2398 7.29638 20 8.23756 20H15.948C16.9253 20 17.6855 19.2036 17.6855 18.2624V10.8778C17.6855 10.2986 17.3959 9.75566 16.9253 9.42986ZM8.45508 4.72412H15.7311V6.71507H15.3329H8.85327H8.45508V4.72412ZM15.9475 19.2397C16.4905 19.2397 16.9249 18.8053 16.9249 18.2624V10.8777C16.9249 10.552 16.7439 10.2624 16.4905 10.0814C15.6218 9.50218 15.0788 8.561 14.9702 7.51123H9.21452C9.10592 8.52481 8.56293 9.46598 7.69415 10.0814C7.40456 10.2624 7.25977 10.552 7.25977 10.8777V18.2624C7.25977 18.8053 7.69415 19.2397 8.23714 19.2397H15.9475Z"
      fill="#626775"
    />
    <Path
      d="M15.7308 7.47511V6.87511H15.0434L15.1363 7.55618L15.7308 7.47511ZM16.9253 9.42986L16.574 9.91637L16.5838 9.92318L16.9253 9.42986ZM8.45475 7.47511L9.04925 7.55618L9.14212 6.87511H8.45475V7.47511ZM7.26018 9.42986L6.92731 8.93056L6.91866 8.93655L7.26018 9.42986ZM15.7311 4.72412H16.3311V4.12412H15.7311V4.72412ZM8.45508 4.72412V4.12412H7.85508V4.72412H8.45508ZM15.7311 6.71507V7.31507H16.3311V6.71507H15.7311ZM8.45508 6.71507H7.85508V7.31507H8.45508V6.71507ZM16.4905 10.0814L16.8393 9.59313L16.8314 9.5875L16.8234 9.58214L16.4905 10.0814ZM14.9702 7.51123L15.567 7.44949L15.5113 6.91123H14.9702V7.51123ZM9.21452 7.51123V6.91123H8.67537L8.61793 7.44731L9.21452 7.51123ZM7.69415 10.0814L8.01215 10.5902L8.02684 10.581L8.04097 10.571L7.69415 10.0814ZM15.1363 7.55618C15.2684 8.52547 15.7979 9.35574 16.574 9.91627L17.2766 8.94346C16.7496 8.56281 16.4103 8.01752 16.3253 7.39404L15.1363 7.55618ZM16.0928 6.87511H15.7308V8.07511H16.0928V6.87511ZM15.8548 7.11312C15.8548 7.04734 15.8792 6.99264 15.9166 6.9526C15.9595 6.90655 16.0249 6.87511 16.0928 6.87511V8.07511C16.6796 8.07511 17.0548 7.58583 17.0548 7.11312H15.8548ZM15.8548 4.36199V7.11312H17.0548V4.36199H15.8548ZM16.0928 4.6C16.027 4.6 15.9723 4.57555 15.9322 4.53818C15.8862 4.4952 15.8548 4.4299 15.8548 4.36199H17.0548C17.0548 3.77511 16.5655 3.4 16.0928 3.4V4.6ZM8.09276 4.6H16.0928V3.4H8.09276V4.6ZM8.33077 4.36199C8.33077 4.42778 8.30632 4.48247 8.26895 4.52251C8.22597 4.56856 8.16067 4.6 8.09276 4.6V3.4C7.50588 3.4 7.13077 3.88929 7.13077 4.36199H8.33077ZM8.33077 7.11312V4.36199H7.13077V7.11312H8.33077ZM8.09276 6.87511C8.15855 6.87511 8.21324 6.89956 8.25328 6.93693C8.29933 6.97991 8.33077 7.04521 8.33077 7.11312H7.13077C7.13077 7.70001 7.62006 8.07511 8.09276 8.07511V6.87511ZM8.45475 6.87511H8.09276V8.07511H8.45475V6.87511ZM7.593 9.92909C8.39694 9.39314 8.91895 8.51173 9.04925 7.55618L7.86025 7.39405C7.77336 8.03126 7.42659 8.59782 6.92736 8.93063L7.593 9.92909ZM7.1 10.8416C7.1 10.5047 7.28534 10.1422 7.60171 9.92318L6.91866 8.93655C6.29384 9.36911 5.9 10.0926 5.9 10.8416H7.1ZM7.1 18.2624V10.8416H5.9V18.2624H7.1ZM8.23756 19.4C7.61958 19.4 7.1 18.9003 7.1 18.2624H5.9C5.9 19.5793 6.97318 20.6 8.23756 20.6V19.4ZM15.948 19.4H8.23756V20.6H15.948V19.4ZM17.0855 18.2624C17.0855 18.8804 16.5859 19.4 15.948 19.4V20.6C17.2648 20.6 18.2855 19.5268 18.2855 18.2624H17.0855ZM17.0855 10.8778V18.2624H18.2855V10.8778H17.0855ZM16.5838 9.92318C16.8945 10.1382 17.0855 10.4979 17.0855 10.8778H18.2855C18.2855 10.0994 17.8974 9.37307 17.2669 8.93655L16.5838 9.92318ZM15.7311 4.12412H8.45508V5.32412H15.7311V4.12412ZM16.3311 6.71507V4.72412H15.1311V6.71507H16.3311ZM15.3329 7.31507H15.7311V6.11507H15.3329V7.31507ZM8.85327 7.31507H15.3329V6.11507H8.85327V7.31507ZM8.45508 7.31507H8.85327V6.11507H8.45508V7.31507ZM7.85508 4.72412V6.71507H9.05508V4.72412H7.85508ZM16.3249 18.2624C16.3249 18.474 16.1592 18.6397 15.9475 18.6397V19.8397C16.8219 19.8397 17.5249 19.1367 17.5249 18.2624H16.3249ZM16.3249 10.8777V18.2624H17.5249V10.8777H16.3249ZM16.1418 10.5696C16.2681 10.6599 16.3249 10.7805 16.3249 10.8777H17.5249C17.5249 10.3234 17.2197 9.86487 16.8393 9.59313L16.1418 10.5696ZM14.3734 7.57297C14.4993 8.79024 15.1317 9.89656 16.1577 10.5806L16.8234 9.58214C16.1119 9.1078 15.6583 8.33176 15.567 7.44949L14.3734 7.57297ZM9.21452 8.11123H14.9702V6.91123H9.21452V8.11123ZM8.04097 10.571C9.04974 9.85643 9.68411 8.76046 9.8111 7.57515L8.61793 7.44731C8.52773 8.28916 8.07612 9.07553 7.34734 9.59175L8.04097 10.571ZM7.85977 10.8777C7.85977 10.7439 7.91033 10.6538 8.01215 10.5902L7.37616 9.57257C6.8988 9.87092 6.65977 10.3601 6.65977 10.8777H7.85977ZM7.85977 18.2624V10.8777H6.65977V18.2624H7.85977ZM8.23714 18.6397C8.02553 18.6397 7.85977 18.474 7.85977 18.2624H6.65977C6.65977 19.1367 7.36278 19.8397 8.23714 19.8397V18.6397ZM15.9475 18.6397H8.23714V19.8397H15.9475V18.6397Z"
      fill="#626775"
    />
  </Svg>
);

type Props = {
  // This is pretty wrong.
  // Using same type of BleedPain for a timeline item which can also be Activity/Steps, etc?!
  item: TimelineItem;
  testID: string;
  onPress: () => void;
};

export const TimelineEvent: FC<Props> = ({ item, testID, onPress }) => {
  const theme = useTheme();

  const getTextContent = (): string => {
    return "Some very weird item";
  };

  const getCategoryText = (): string => {
    return "Category " + item.type;
  };
  const headerContent = `${getTextContent()}`;

  return (
    <Pressable onPress={onPress} testID={`${testID}-container`}>
      <EventWrapper>
        <IconWrapper>
          <Pill />
        </IconWrapper>
        <EventContentWrapper>
          <CategoryName>{getCategoryText()}</CategoryName>
          <EventContent>{headerContent ? headerContent : ""}</EventContent>
          <DateWrapper testID={`${testID}-date-duration`}>
            {getFormattedDateWithTodayTomorrow(
              new Date(item.attributes.time),
              true
            )}
          </DateWrapper>
        </EventContentWrapper>
        <DetailsButtonWrapper></DetailsButtonWrapper>
      </EventWrapper>
      <Divider />
    </Pressable>
  );
};

const DetailsButtonWrapper = styled.View`
  padding: 16px;
  align-items: center;
  justify-content: center;
  flex-direction: row;
  gap: 8px;
`;

const EventContentWrapper = styled.View`
  flex: 1;
  gap: 4px;
  align-items: flex-start;
`;

const EventWrapper = styled.View`
  padding-vertical: 16px;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  background-color: ${({ theme }) => theme.color.white};
`;

const IconWrapper = styled.View`
  padding: 16px;
`;

const CategoryName = styled(P1Regular)`
  color: ${({ theme }) => theme.color.grey60};
`;

const EventContent = styled(P1Bold)`
  color: ${({ theme }) => theme.color.grey80};
`;

const DateWrapper = styled(P2Regular)`
  color: ${({ theme }) => theme.color.grey60};
`;
